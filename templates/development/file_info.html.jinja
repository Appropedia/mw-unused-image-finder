<!doctype html>
<html>
  <head>
    <title> File information </title>
  </head>
  <body>
    <H1>{{image_title}}</H1>

    <form action="http://localhost/File:Tolocar_Activities_Map.png">
      <input type="hidden" name="action" value="edit">
      <input type="hidden" name="section" value="new">
      <input type="hidden" name="preload" value="Template:Categorize_image">
      <button type="submit" class="link-button">
        Category addition test
      </button>
    </form>

    <div>Description page: <a id="descriptionurl" target="_blank"></a></div>

    <div id="message" style="color: red;"></div>

    <style>
      table, th, td {
        border: 1px solid black;
        border-collapse: collapse;
      }
    </style>
    <table id='revisions_table'>
      <tr>
        <th>Revision time</th>
        <th>Size</th>
        <th>Dimensions</th>
        <th>Thumbnail</th>
        <th>Similar images</th>
      </tr>
    </table>

    <script type=module>
      import { format_local_datetime, iso_to_unix, query_image_info, query_similar_image_info }
      from '{{url_for('static', filename='development/file_info.js')}}';

      import { format_storage_units }
      from '{{url_for('static', filename='format_utils.js')}}';

      const not_available_label = 'Not available';

      const descriptionurl = document.getElementById('descriptionurl');
      const message = document.getElementById('message');
      const revisions_table = document.getElementById('revisions_table');

      const revisions = {{revisions|tojson}};

      const rows = {};
      for (const rev of revisions) {
        //Create a new row element in the revisions table
        const new_row = revisions_table.insertRow(-1);

        //Add the data stored locally
        new_row.insertCell(-1).textContent = format_local_datetime(rev.timestamp);
        new_row.insertCell(-1).textContent = format_storage_units(rev.size);
        new_row.insertCell(-1);
        new_row.insertCell(-1);
        new_row.insertCell(-1);

        //Store the newly generated row element for adding more data at a later time
        rows[rev.timestamp] = new_row;

        if (rev.similar_images.length == 0)
          continue;

        (async () => {
          const results = await query_similar_image_info(
            '{{api_url}}',
            rev.similar_images.map(i=>i.title).join('|'));

          // console.log(results);
          for (const r of results) {
            // console.log(iso_to_unix(r.timestamp), rev.similar_images.map(i=>i.timestamp));
            const div = new_row.cells[4].appendChild(document.createElement('div'));
            const img = div.appendChild(document.createElement('img'));
            img.src = r.thumburl;
          }
        })();
      }

      (async () => {
        // try {
          //Perform an API request for image information to the mediawiki server
          const results = await query_image_info('{{api_url}}', '{{image_title}}');

          //Fill in the link to the description page
          descriptionurl.textContent = results.descriptionurl;
          descriptionurl.href = results.descriptionurl;

          //Iterate over the revision data
          for (const wiki_rev of results.revisions) {
            const unix_timestamp = iso_to_unix(wiki_rev.timestamp);

            //Fill the revision data if a row can hold it
            if (unix_timestamp in rows) {
              //Fill the image dimensions, if available
              if ('width' in wiki_rev && 'height' in wiki_rev) {
                rows[unix_timestamp].cells[2].textContent =
                  `${wiki_rev.width} x ${wiki_rev.height}`;
              }
              else {
                rows[unix_timestamp].cells[2].textContent = not_available_label;
              }

              //Fill the thumbnail
              const img = rows[unix_timestamp].cells[3].appendChild(document.createElement('img'));
              img.src = wiki_rev.thumburl;
            }
          }
        // }
        // catch (error) {
        //   message.textContent = error;
        //   return;
        // }
      })();
    </script>
  </body>
</html>
